     1                                  ;; icalc.asm
     2                                  
     3                                  extern	printf
     4                                  
     5                                  section .data
     6 00000000 8000000000000000        	number1	dq	128
     7 00000008 1300000000000000        	number2 dq	19
     8 00000010 F4FFFFFFFFFFFFFF        	neg_num	dq	-12
     9 00000018 746865206E756D6265-     	fmt	db	"the number is %ld and %ld",10,0
     9 00000021 7220697320256C6420-
     9 0000002A 616E6420256C640A00 
    10 00000033 257320256C640A00        	fmtint	db	"%s %ld",10,0
    11 0000003B 5468652073756D2069-     	sumi	db	"The sum is",0
    11 00000044 7300               
    12 00000046 546865206469666665-     	difi	db	"The difference is",0
    12 0000004F 72656E636520697300 
    13 00000058 4E756D626572203120-     	inci	db	"Number 1 Incremented:",0
    13 00000061 496E6372656D656E74-
    13 0000006A 65643A00           
    14 0000006E 4E756D626572203120-     	deci	db	"Number 1 Decremented:",0
    14 00000077 44656372656D656E74-
    14 00000080 65643A00           
    15 00000084 4E756D626572203120-     	sali	db	"Number 1 Shift left 2 (x4):",0
    15 0000008D 5368696674206C6566-
    15 00000096 74203220287834293A-
    15 0000009F 00                 
    16 000000A0 4E756D626572203120-     	sari	db	"Number 1 Shift right 2 (/4):",0
    16 000000A9 536869667420726967-
    16 000000B2 6874203220282F3429-
    16 000000BB 3A00               
    17 000000BD 4E756D626572203120-     	sariex	db	"Number 1 Shift right 2 (/4) with "
    17 000000C6 536869667420726967-
    17 000000CF 6874203220282F3429-
    17 000000D8 207769746820       
    18 000000DE 7369676E2065787465-     		db	"sign extension:",0
    18 000000E7 6E73696F6E3A00     
    19 000000EE 5468652070726F6475-     	multi	db	"The product is",0
    19 000000F7 637420697300       
    20 000000FD 54686520696E746567-     	divi	db	"The integer quotient is",0
    20 00000106 65722071756F746965-
    20 0000010F 6E7420697300       
    21 00000115 546865206D6F64756C-     	remi	db	"The modulo is",0
    21 0000011E 6F20697300         
    22                                  
    23                                  section	.bss
    24 00000000 ????????????????        	resulti	resq	1
    25 00000008 ????????????????        	modulo	resq	1
    26                                  
    27                                  section	.text
    28                                  	global main
    29                                  main:
    30 00000000 55                      	push	rbp
    31 00000001 4889E5                  	mov	rbp, rsp
    32                                  ; Numbers 1 and 2 wirte to stdout.
    33 00000004 48BF-                   	mov	rdi, fmt
    33 00000006 [1800000000000000] 
    34 0000000E 488B3425[00000000]      	mov	rsi, [number1]
    35 00000016 488B1425[08000000]      	mov	rdx, [number2]
    36 0000001E B800000000              	mov	rax, 0
    37 00000023 E8(00000000)            	call	printf
    38                                  ; Add number1 and number2.
    39 00000028 488B0425[00000000]      	mov	rax, [number1]
    40 00000030 48030425[08000000]      	add	rax, [number2]
    41 00000038 48890425[00000000]      	mov	[resulti], rax
    42                                  	; dispaying the result.
    43 00000040 48BF-                   	mov	rdi, fmtint
    43 00000042 [3300000000000000] 
    44 0000004A 48BE-                   	mov	rsi, sumi
    44 0000004C [3B00000000000000] 
    45 00000054 488B1425[00000000]      	mov	rdx, [resulti]
    46 0000005C B800000000              	mov	rax, 0
    47 00000061 E8(00000000)            	call printf
    48                                  ; Substraction.
    49 00000066 488B0425[00000000]      	mov	rax, [number1]
    50 0000006E 482B0425[08000000]      	sub	rax, [number2]
    51 00000076 48890425[00000000]      	mov	[resulti], rax
    52                                  	; displaying the result.
    53 0000007E 48BF-                   	mov	rdi, fmtint
    53 00000080 [3300000000000000] 
    54 00000088 48BE-                   	mov	rsi, difi
    54 0000008A [4600000000000000] 
    55 00000092 488B1425[00000000]      	mov	rdx, [resulti]
    56 0000009A B800000000              	mov	rax, 0
    57 0000009F E8(00000000)            	call	printf
    58                                  ; Incremention
    59 000000A4 488B0425[00000000]      	mov	rax, [number1]
    60 000000AC 48FFC0                  	inc	rax
    61 000000AF 48890425[00000000]      	mov	[resulti], rax
    62                                  	; displaying the result.
    63 000000B7 48BF-                   	mov	rdi, fmtint
    63 000000B9 [3300000000000000] 
    64 000000C1 48BE-                   	mov	rsi, inci
    64 000000C3 [5800000000000000] 
    65 000000CB 488B1425[00000000]      	mov	rdx, [resulti]
    66 000000D3 B800000000              	mov	rax, 0
    67 000000D8 E8(00000000)            	call	printf
    68                                  ; Decremention
    69 000000DD 488B0425[00000000]      	mov	rax, [number1]
    70 000000E5 48FFC8                  	dec	rax
    71 000000E8 48890425[00000000]      	mov	[resulti], rax
    72                                  	; displaying the result.
    73 000000F0 48BF-                   	mov	rdi, fmtint
    73 000000F2 [3300000000000000] 
    74 000000FA 48BE-                   	mov	rsi, deci
    74 000000FC [6E00000000000000] 
    75 00000104 488B1425[00000000]      	mov	rdx, [resulti]
    76 0000010C B800000000              	mov	rax, 0
    77 00000111 E8(00000000)            	call	printf
    78                                  ; Ariphmetic shift left.
    79 00000116 488B0425[00000000]      	mov	rax, [number1]
    80 0000011E 48C1E002                	sal	rax, 2			; Mutiply rax by 4.
    81 00000122 48890425[00000000]      	mov	[resulti], rax
    82                                  	; displaying the result.
    83 0000012A 48BF-                   	mov	rdi, fmtint
    83 0000012C [3300000000000000] 
    84 00000134 48BE-                   	mov	rsi, sali
    84 00000136 [8400000000000000] 
    85 0000013E 488B1425[00000000]      	mov	rdx, [resulti]
    86 00000146 B800000000              	mov	rax, 0
    87 0000014B E8(00000000)            	call	printf
    88                                  ; Ariphmetic shift right.
    89 00000150 488B0425[00000000]      	mov	rax, [number1]
    90 00000158 48C1F802                	sar	rax, 2			; Divide rax by 4.
    91 0000015C 48890425[00000000]      	mov	[resulti], rax
    92                                  	; displaying the result.
    93 00000164 48BF-                   	mov	rdi, fmtint
    93 00000166 [3300000000000000] 
    94 0000016E 48BE-                   	mov	rsi, sari
    94 00000170 [A000000000000000] 
    95 00000178 488B1425[00000000]      	mov	rdx, [resulti]
    96 00000180 B800000000              	mov	rax, 0
    97 00000185 E8(00000000)            	call	printf
    98                                  ; Ariphmetic shift right with sign bit.
    99 0000018A 488B0425[10000000]      	mov	rax, [neg_num]
   100 00000192 48C1F802                	sar	rax, 2			; Divide rax by 4.
   101 00000196 48890425[00000000]      	mov	[resulti], rax
   102                                  	; displaying the result.
   103 0000019E 48BF-                   	mov	rdi, fmtint
   103 000001A0 [3300000000000000] 
   104 000001A8 48BE-                   	mov	rsi, sariex
   104 000001AA [BD00000000000000] 
   105 000001B2 488B1425[00000000]      	mov	rdx, [resulti]
   106 000001BA B800000000              	mov	rax, 0
   107 000001BF E8(00000000)            	call	printf
   108                                  ; Multiply.
   109 000001C4 488B0425[00000000]      	mov	rax, [number1]
   110 000001CC 48F72C25[08000000]      	imul	qword [number2]		; Multiply number1 by number2.	
   111 000001D4 48890425[00000000]      	mov	[resulti], rax
   112                                  	; displaying the result.
   113 000001DC 48BF-                   	mov	rdi, fmtint
   113 000001DE [3300000000000000] 
   114 000001E6 48BE-                   	mov	rsi, multi
   114 000001E8 [EE00000000000000] 
   115 000001F0 488B1425[00000000]      	mov	rdx, [resulti]
   116 000001F8 B800000000              	mov	rax, 0
   117 000001FD E8(00000000)            	call	printf
   118                                  ; Division.
   119 00000202 488B0425[00000000]      	mov	rax, [number1]
   120 0000020A BA00000000              	mov	rdx, 0			; in rdx must be 0 before idiv.
   121 0000020F 48F73C25[08000000]      	idiv	qword [number2]		; division rax by number2, tail in rdx.
   122 00000217 48890425[00000000]      	mov	[resulti], rax
   123 0000021F 48891425[08000000]      	mov	[modulo], rdx
   124                                  	; displaying the result.
   125 00000227 48BF-                   	mov	rdi, fmtint
   125 00000229 [3300000000000000] 
   126 00000231 48BE-                   	mov	rsi, divi
   126 00000233 [FD00000000000000] 
   127 0000023B 488B1425[00000000]      	mov	rdx, [resulti]
   128 00000243 B800000000              	mov	rax, 0
   129 00000248 E8(00000000)            	call	printf
   130 0000024D 48BF-                   	mov	rdi, fmtint
   130 0000024F [3300000000000000] 
   131 00000257 48BE-                   	mov	rsi, remi
   131 00000259 [1501000000000000] 
   132 00000261 488B1425[08000000]      	mov	rdx, [modulo]
   133 00000269 B800000000              	mov	rax, 0
   134 0000026E E8(00000000)            	call	printf
   135 00000273 4889EC                  	mov	rsp, rbp
   136 00000276 5D                      	pop	rbp
   137 00000277 C3                      	ret
   138                                  
   139                                  
