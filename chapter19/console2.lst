     1                                  ;; console2.asm
     2                                  section	.data
     3 00000000 48656C6C6F2C20576F-     	msg1		db	"Hello, World!",10,0
     3 00000009 726C64210A00       
     4 0000000F 596F7572207475726E-     	msg2		db	"Your turn (only a-z): ",0
     4 00000018 20286F6E6C7920612D-
     4 00000021 7A293A2000         
     5 00000026 596F7520616E737765-     	msg3		db	"You answered: ",0
     5 0000002F 7265643A2000       
     6                                  	inputlen	equ	10				; Buffer lenght
     7 00000035 0A                      	NL		db	0xa
     8                                  section	.bss
     9 00000000 <res Bh>                	input	resb	inputlen+1
    10                                  section	.text
    11                                  	global main
    12                                  main:
    13 00000000 55                      	push	rbp
    14 00000001 4889E5                  	mov	rbp, rsp
    15                                  
    16 00000004 48BF-                   	mov	rdi, msg1
    16 00000006 [0000000000000000] 
    17 0000000E E852000000              	call	prints
    18 00000013 48BF-                   	mov	rdi, msg2
    18 00000015 [0F00000000000000] 
    19 0000001D E843000000              	call	prints
    20 00000022 48BF-                   	mov	rdi, input
    20 00000024 [0000000000000000] 
    21 0000002C BE0A000000              	mov	rsi, inputlen
    22 00000031 E863000000              	call	reads
    23 00000036 48BF-                   	mov	rdi, msg3
    23 00000038 [2600000000000000] 
    24 00000040 E820000000              	call	prints
    25 00000045 48BF-                   	mov	rdi, input
    25 00000047 [0000000000000000] 
    26 0000004F E811000000              	call	prints
    27 00000054 48BF-                   	mov	rdi, NL				; New line symbol.
    27 00000056 [3500000000000000] 
    28 0000005E E802000000              	call	prints
    29 00000063 C9                      leave
    30 00000064 C3                      ret
    31                                  ;--------------------------------------
    32                                  prints:
    33 00000065 55                      	push	rbp
    34 00000066 4889E5                  	mov	rbp, rsp
    35 00000069 4154                    	push	r12				; Saved register by calling func.
    36                                  	; Count chars.
    37 0000006B 4831D2                  	xor	rdx, rdx			; length in rdx.
    38 0000006E 4989FC                  	mov	r12, rdi
    39                                  .lengthloop:
    40 00000071 41803C2400              	cmp	byte [r12], 0
    41 00000076 7408                    	je	.lengthfound
    42 00000078 48FFC2                  	inc	rdx
    43 0000007B 49FFC4                  	inc	r12
    44 0000007E EBF1                    	jmp	.lengthloop
    45                                  .lengthfound:					; string out, lenght in rdx.
    46 00000080 4883FA00                	cmp	rdx, 0				; string doesn't exist(len=0).
    47 00000084 740F                    	je	.done
    48 00000086 4889FE                  	mov	rsi, rdi			; rdi - string adress.
    49 00000089 B801000000              	mov	rax, 1				; 1 = write.
    50 0000008E BF01000000              	mov	rdi, 1				; 1 = stdout.
    51 00000093 0F05                    	syscall
    52                                  .done:
    53 00000095 415C                    	pop	r12
    54 00000097 C9                      	leave
    55 00000098 C3                      	ret
    56                                  ;--------------------------------------
    57                                  reads:
    58                                  section	.data
    59                                  section	.bss
    60 0000000B ??                      	.inputchar	resb	1
    61                                  section	.text
    62 00000099 55                      	push	rbp
    63 0000009A 4889E5                  	mov	rbp, rsp
    64                                  
    65 0000009D 4154                    	push	r12
    66 0000009F 4155                    	push	r13
    67 000000A1 4156                    	push	r14
    68 000000A3 4989FC                  	mov	r12, rdi			; inputbuffer's adress.
    69 000000A6 4989F5                  	mov	r13, rsi			; Maximum length in r13.
    70 000000A9 4D31F6                  	xor	r14, r14			; Char's counter.
    71                                  .readc:
    72 000000AC 4831C0                  	xor	rax, rax			; Read.
    73 000000AF BF01000000              	mov	rdi, 1				; 1 = stdin.
    74 000000B4 488D3425[0B000000]      	lea	rsi, [.inputchar]		; Source adress.
    75 000000BC BA01000000              	mov	rdx, 1				; Number of reading chars.
    76 000000C1 0F05                    	syscall
    77 000000C3 8A0425[0B000000]        	mov	al, [.inputchar]		; Input NL?
    78 000000CA 3A0425[35000000]        	cmp	al, byte [NL]
    79 000000D1 7419                    	je	.done				; NL - end of input.
    80 000000D3 3C61                    	cmp	al, 97				; Char code < a?
    81 000000D5 7CD5                    	jl	.readc				; Cut the char.
    82 000000D7 3C7A                    	cmp	al, 122				; Char code > z?
    83 000000D9 7FD1                    	jg	.readc				; Cut the char.
    84 000000DB 49FFC6                  	inc	r14				; Inc counter of chars.
    85 000000DE 4D39EE                  	cmp	r14, r13			
    86 000000E1 77C9                    	ja	.readc				; Maximum buffer fill, cut the excludings.
    87 000000E3 41880424                	mov	byte [r12], al
    88 000000E7 49FFC4                  	inc	r12				; Mov pointer to next char.
    89 000000EA EBC0                    	jmp	.readc
    90                                  .done:
    91 000000EC 49FFC4                  	inc	r12
    92 000000EF 41C6042400              	mov	byte [r12], 0			; Add NL to inputbuffer.
    93 000000F4 415E                    	pop	r14
    94 000000F6 415D                    	pop	r13
    95 000000F8 415C                    	pop	r12
    96 000000FA C9                      leave
    97 000000FB C3                      ret
