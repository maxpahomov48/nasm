     1                                  ; shuffle.asm
     2                                  extern	printf
     3                                  section	.data
     4 00000000 546865726520617265-     	fmt0	db	"There are the numbers in memory: ",10,0
     4 00000009 20746865206E756D62-
     4 00000012 65727320696E206D65-
     4 0000001B 6D6F72793A200A00   
     5 00000023 546869732069732078-     	fmt00	db	"This is xmm0: ",10,0
     5 0000002C 6D6D303A200A00     
     6 00000033 25642000                	fmt1	db	"%d ",0
     7 00000037 53687566666C652D62-     	fmt2	db	"Shuffle-broadcast double word %i:",10,0
     7 00000040 726F61646361737420-
     7 00000049 646F75626C6520776F-
     7 00000052 72642025693A0A00   
     8 0000005A 256420256420256420-     	fmt3	db	"%d %d %d %d",10,0
     8 00000063 25640A00           
     9 00000067 53687566666C652D72-     	fmt4	db	"Shuffle-reverse double words:",10,0
     9 00000070 65766572736520646F-
     9 00000079 75626C6520776F7264-
     9 00000082 733A0A00           
    10 00000086 53687566666C652D72-     	fmt5	db	"Shuffle-reverse packed bytes in xmm0:",10,0
    10 0000008F 657665727365207061-
    10 00000098 636B65642062797465-
    10 000000A1 7320696E20786D6D30-
    10 000000AA 3A0A00             
    11 000000AD 53687566666C652D72-     	fmt6	db	"Shuffle-rotate left:",10,0
    11 000000B6 6F74617465206C6566-
    11 000000BF 743A0A00           
    12 000000C3 53687566666C652D72-     	fmt7	db	"Shuffle-rotate right:",10,0
    12 000000CC 6F7461746520726967-
    12 000000D5 68743A0A00         
    13 000000DA 256325632563256325-     	fmt8	db	"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",10,0
    13 000000E3 632563256325632563-
    13 000000EC 256325632563256325-
    13 000000F5 63256325630A00     
    14 000000FC 5061636B6564206279-     	fmt9	db	"Packed bytes in xmm0:",10,0
    14 00000105 74657320696E20786D-
    14 0000010E 6D303A0A00         
    15 00000113 0A00                    	NL	db	10,0
    16                                  
    17 00000115 01000000                	number1	dd	1
    18 00000119 02000000                	number2	dd	2
    19 0000011D 03000000                	number3	dd	3
    20 00000121 04000000                	number4	dd	4
    21 00000125 616263646566676869-     	char	db	"abcdefghijklmnop"
    21 0000012E 6A6B6C6D6E6F70     
    22 00000135 0F0E0D0C0B0A090807-     	bytereverse db	15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
    22 0000013E 06050403020100     
    23                                  
    24                                  section	.bss
    25                                  section	.text
    26                                  	global main
    27                                  main:
    28 00000000 55                      	push	rbp
    29 00000001 4889E5                  	mov	rbp,rsp
    30                                  	
    31 00000004 4883EC20                	sub	rsp,32	;for the original xmm0
    32                                                   	;and for the modified xmm0.
    33                                  ; SHUFFLING DOUBLE WORDS 
    34                                  ; first print the numbers in reverse.
    35 00000008 48BF-                   	mov	rdi,fmt0
    35 0000000A [0000000000000000] 
    36 00000012 E8(00000000)            	call	printf
    37 00000017 48BF-                   	mov	rdi,fmt1
    37 00000019 [3300000000000000] 
    38 00000021 488B3425[21010000]      	mov	rsi,[number4]
    39 00000029 4831C0                  	xor	rax,rax
    40 0000002C E8(00000000)            	call	printf
    41 00000031 48BF-                   	mov	rdi,fmt1
    41 00000033 [3300000000000000] 
    42 0000003B 488B3425[1D010000]      	mov	rsi,[number3]
    43 00000043 4831C0                  	xor	rax,rax
    44 00000046 E8(00000000)            	call	printf
    45 0000004B 48BF-                   	mov	rdi,fmt1
    45 0000004D [3300000000000000] 
    46 00000055 488B3425[19010000]      	mov	rsi,[number2]
    47 0000005D 4831C0                  	xor	rax,rax
    48 00000060 E8(00000000)            	call	printf
    49 00000065 48BF-                   	mov	rdi,fmt1
    49 00000067 [3300000000000000] 
    50 0000006F 488B3425[15010000]      	mov	rsi,[number1]
    51 00000077 4831C0                  	xor	rax,rax
    52 0000007A E8(00000000)            	call	printf
    53 0000007F 48BF-                   	mov	rdi,NL
    53 00000081 [1301000000000000] 
    54 00000089 E8(00000000)            	call	printf
    55                                  ; build xmm0 with the number.
    56 0000008E 660FEFC0                	pxor	xmm0,xmm0
    57 00000092 660F3A220425-           	pinsrd	xmm0,dword[number1],0
    57 00000098 [15010000]00       
    58 0000009D 660F3A220425-           	pinsrd	xmm0,dword[number2],1
    58 000000A3 [19010000]01       
    59 000000A8 660F3A220425-           	pinsrd	xmm0,dword[number3],2
    59 000000AE [1D010000]02       
    60 000000B3 660F3A220425-           	pinsrd	xmm0,dword[number4],3
    60 000000B9 [21010000]03       
    61 000000BE F30F7F45F0              	movdqu	[rbp-16],xmm0	; save xmm0 for later use
    62 000000C3 48BF-                   	mov	rdi, fmt00
    62 000000C5 [2300000000000000] 
    63 000000CD E8(00000000)            	call	printf		; print title
    64 000000D2 F30F6F45F0              	movdqu	xmm0,[rbp-16]	; restore xmm0 after printf
    65 000000D7 E886010000              	call	print_xmm0d	; print xmm0
    66 000000DC F30F6F45F0              	movdqu	xmm0,[rbp-16]	; restore xmm0 after printf
    67                                  ; SHUFFLE-BROADCAST
    68                                  ; shuffle: broadcast least significant dword (index 0)
    69 000000E1 F30F6F45F0              	movdqu	xmm0,[rbp-16]	; restore xmm0
    70 000000E6 660F70C000              	pshufd	xmm0,xmm0,00000000b	; shuffle	
    71 000000EB 48BF-                   	mov	rdi,fmt2
    71 000000ED [3700000000000000] 
    72 000000F5 BE00000000              	mov	rsi,0		; print title
    73 000000FA F30F7F45E0              	movdqu	[rbp-32],xmm0	; printf kills xmm0
    74 000000FF E8(00000000)            	call	printf
    75 00000104 F30F6F45E0              	movdqu	xmm0,[rbp-32]	; restore xmm0 after printf
    76 00000109 E854010000              	call	print_xmm0d	; print xmm0
    77                                  ; shuffle: broadcast least significant dword (index 1)
    78 0000010E F30F6F45F0              	movdqu	xmm0,[rbp-16]	; restore xmm0
    79 00000113 660F70C055              	pshufd	xmm0,xmm0,01010101b	; shuffle
    80 00000118 48BF-                   	mov	rdi,fmt2
    80 0000011A [3700000000000000] 
    81 00000122 BE01000000              	mov	rsi,1		; print title
    82 00000127 F30F7F45E0              	movdqu	[rbp-32],xmm0	; printf kills xmm0
    83 0000012C E8(00000000)            	call	printf
    84 00000131 F30F6F45E0              	movdqu	xmm0,[rbp-32]	; restore xmm0 after printf
    85 00000136 E827010000              	call	print_xmm0d	; print xmm0
    86                                  ; shuffle: broadcast least significant dword (index 2)
    87 0000013B F30F6F45F0              	movdqu	xmm0,[rbp-16]	; restore xmm0
    88 00000140 660F70C0AA              	pshufd	xmm0,xmm0,10101010b	; shuffle
    89 00000145 48BF-                   	mov	rdi,fmt2
    89 00000147 [3700000000000000] 
    90 0000014F BE02000000              	mov	rsi,2		; print title
    91 00000154 F30F7F45E0              	movdqu	[rbp-32],xmm0	; printf kills xmm0
    92 00000159 E8(00000000)            	call	printf
    93 0000015E F30F6F45E0              	movdqu	xmm0,[rbp-32]	; restore xmm0 after printf
    94 00000163 E8FA000000              	call	print_xmm0d	; print xmm0
    95                                  ; shuffle: broadcast least significant dword (index 3)
    96 00000168 F30F6F45F0              	movdqu	xmm0,[rbp-16]	; restore xmm0
    97 0000016D 660F70C0FF              	pshufd	xmm0,xmm0,11111111b	; shuffle
    98 00000172 48BF-                   	mov	rdi,fmt2
    98 00000174 [3700000000000000] 
    99 0000017C BE03000000              	mov	rsi,3		; print title
   100 00000181 F30F7F45E0              	movdqu	[rbp-32],xmm0	; printf kills xmm0
   101 00000186 E8(00000000)            	call	printf
   102 0000018B F30F6F45E0              	movdqu	xmm0,[rbp-32]	; restore xmm0 after printf
   103 00000190 E8CD000000              	call	print_xmm0d	; print xmm0
   104                                  ; SHUFFLE-REVERSE
   105                                  ; reverse double words
   106 00000195 F30F6F45F0              	movdqu	xmm0,[rbp-16]	; restore xmm0
   107 0000019A 660F70C01B              	pshufd	xmm0,xmm0,00011011b	; shuffle
   108 0000019F 48BF-                   	mov	rdi,fmt4	; print title
   108 000001A1 [6700000000000000] 
   109 000001A9 F30F7F45E0              	movdqu	[rbp-32],xmm0	; printf kills xmm0
   110 000001AE E8(00000000)            	call	printf
   111 000001B3 F30F6F45E0              	movdqu	xmm0,[rbp-32]	; restore xmm0 after printf
   112 000001B8 E8A5000000              	call	print_xmm0d
   113                                  ; SHUFFLE-ROTATE
   114                                  ; rotate left
   115 000001BD F30F6F45F0              	movdqu	xmm0,[rbp-16]	; restore xmm0
   116 000001C2 660F70C093              	pshufd	xmm0,xmm0,10010011b	; shuffle
   117 000001C7 48BF-                   	mov	rdi,fmt6	; print title
   117 000001C9 [AD00000000000000] 
   118 000001D1 F30F7F45E0              	movdqu	[rbp-32],xmm0	; printf kills xmm0
   119 000001D6 E8(00000000)            	call	printf
   120 000001DB F30F6F45E0              	movdqu	xmm0,[rbp-32]	; restore xmm0 after printf
   121 000001E0 E87D000000              	call	print_xmm0d
   122                                  ; rotate right
   123 000001E5 F30F6F45F0              	movdqu	xmm0,[rbp-16]	; restore xmm0
   124 000001EA 660F70C039              	pshufd	xmm0,xmm0,00111001b	; shuffle
   125 000001EF 48BF-                   	mov	rdi,fmt7	; print title
   125 000001F1 [C300000000000000] 
   126 000001F9 F30F7F45E0              	movdqu	[rbp-32],xmm0	; printf kills xmm0
   127 000001FE E8(00000000)            	call	printf
   128 00000203 F30F6F45E0              	movdqu	xmm0,[rbp-32]	; restore xmm0 after printf
   129 00000208 E855000000              	call	print_xmm0d
   130                                  ; SHUFFLING BYTES
   131 0000020D 48BF-                   	mov	rdi,fmt9	
   131 0000020F [FC00000000000000] 
   132 00000217 E8(00000000)            	call	printf		; print title
   133 0000021C F30F6F0425-             	movdqu	xmm0,[char]	; load the char in xmm0
   133 00000221 [25010000]         
   134 00000225 F30F7F45E0              	movdqu	[rbp-32],xmm0	; printf kills xmm0
   135 0000022A E864000000              	call	print_xmm0b	; print bytes in xmm0
   136 0000022F F30F6F45E0              	movdqu	xmm0,[rbp-32]	; restore xmm0 after printf
   137 00000234 F30F6F0C25-             	movdqu	xmm1,[bytereverse] ; load the mask
   137 00000239 [35010000]         
   138 0000023D 660F3800C1              	pshufb	xmm0,xmm1	; shuffle bytes
   139 00000242 48BF-                   	mov	rdi,fmt5	; print title
   139 00000244 [8600000000000000] 
   140 0000024C F30F7F45E0              	movdqu	[rbp-32],xmm0	; printf kills xmm0
   141 00000251 E8(00000000)            	call	printf
   142 00000256 F30F6F45E0              	movdqu	xmm0,[rbp-32]	; restore xmm0 after printf
   143 0000025B E833000000              	call	print_xmm0b
   144 00000260 C9                      leave
   145 00000261 C3                      ret
   146                                  ;function to print double words--------------------
   147                                  print_xmm0d:
   148 00000262 55                      	push	rbp
   149 00000263 4889E5                  	mov	rbp,rsp
   150                                  
   151 00000266 48BF-                   	mov	rdi,fmt3
   151 00000268 [5A00000000000000] 
   152 00000270 4831C0                  	xor	rax,rax
   153 00000273 660F3A16C603            	pextrd	esi,xmm0,3	; extract the double words
   154 00000279 660F3A16C202            	pextrd	edx,xmm0,2	; in reverse, little endian
   155 0000027F 660F3A16C101            	pextrd	ecx,xmm0,1
   156 00000285 66410F3A16C000          	pextrd	r8d,xmm0,0
   157 0000028C E8(00000000)            	call	printf
   158 00000291 C9                      leave
   159 00000292 C3                      ret
   160                                  ;function to print bytes---------------------------
   161                                  print_xmm0b:
   162 00000293 55                      push	rbp
   163 00000294 4889E5                  mov	rbp,rsp
   164 00000297 48BF-                   	mov	rdi,fmt8
   164 00000299 [DA00000000000000] 
   165 000002A1 4831C0                      	xor	rax,rax
   166 000002A4 660F3A14C600                	pextrb 	esi, xmm0,0  	;in reverse, little endian
   167 000002AA 660F3A14C201                	pextrb 	edx, xmm0,1	;use registers first and
   168 000002B0 660F3A14C102                	pextrb 	ecx, xmm0,2	;then the stack
   169 000002B6 66410F3A14C003              	pextrb 	r8d, xmm0,3
   170 000002BD 66410F3A14C104              	pextrb 	r9d, xmm0,4
   171 000002C4 660F3A14C00F                	pextrb 	eax, xmm0,15
   172 000002CA 50                          	push 	rax
   173 000002CB 660F3A14C00E                	pextrb 	eax, xmm0,14
   174 000002D1 50                          	push 	rax
   175 000002D2 660F3A14C00D                	pextrb 	eax, xmm0,13
   176 000002D8 50                          	push 	rax
   177 000002D9 660F3A14C00C                	pextrb 	eax, xmm0,12
   178 000002DF 50                          	push 	rax
   179 000002E0 660F3A14C00B                	pextrb 	eax, xmm0,11
   180 000002E6 50                          	push 	rax
   181 000002E7 660F3A14C00A                	pextrb 	eax, xmm0,10
   182 000002ED 50                          	push 	rax
   183 000002EE 660F3A14C009                	pextrb 	eax, xmm0,9
   184 000002F4 50                          	push 	rax
   185 000002F5 660F3A14C008                	pextrb 	eax, xmm0,8
   186 000002FB 50                          	push 	rax
   187 000002FC 660F3A14C007                	pextrb 	eax, xmm0,7
   188 00000302 50                          	push 	rax
   189 00000303 660F3A14C006                	pextrb 	eax, xmm0,6
   190 00000309 50                         	push 	rax
   191 0000030A 660F3A14C005                	pextrb 	eax, xmm0,5
   192 00000310 50                          	push 	rax
   193 00000311 4831C0                      	xor 		rax,rax
   194 00000314 E8(00000000)                	call 	printf
   195 00000319 C9                      leave
   196 0000031A C3                      ret
